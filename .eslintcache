[{"/home/jethro/projects/srs.ly/src/index.js":"1","/home/jethro/projects/srs.ly/src/App.js":"2","/home/jethro/projects/srs.ly/src/reportWebVitals.js":"3","/home/jethro/projects/srs.ly/src/SyncButton.js":"4","/home/jethro/projects/srs.ly/src/Review.js":"5","/home/jethro/projects/srs.ly/src/Cards.js":"6","/home/jethro/projects/srs.ly/src/FlashCard.js":"7","/home/jethro/projects/srs.ly/src/ClozeCard.js":"8","/home/jethro/projects/srs.ly/src/BasicCard.js":"9"},{"size":543,"mtime":1610444705841,"results":"10","hashOfConfig":"11"},{"size":1084,"mtime":1610444661713,"results":"12","hashOfConfig":"11"},{"size":364,"mtime":1610444705849,"results":"13","hashOfConfig":"11"},{"size":935,"mtime":1610444705925,"results":"14","hashOfConfig":"11"},{"size":2623,"mtime":1610444705893,"results":"15","hashOfConfig":"11"},{"size":2628,"mtime":1610446411906,"results":"16","hashOfConfig":"11"},{"size":305,"mtime":1610444705789,"results":"17","hashOfConfig":"11"},{"size":2294,"mtime":1610444705781,"results":"18","hashOfConfig":"11"},{"size":1762,"mtime":1610444705729,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"142turp",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},"/home/jethro/projects/srs.ly/src/index.js",[],"/home/jethro/projects/srs.ly/src/App.js",["42"],"/home/jethro/projects/srs.ly/src/reportWebVitals.js",[],["43","44"],"/home/jethro/projects/srs.ly/src/SyncButton.js",[],"/home/jethro/projects/srs.ly/src/Review.js",["45","46","47","48","49","50","51","52","53","54","55","56","57"],"import { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Card,\n  Icon,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\nimport FlashCard from \"./FlashCard\";\n\nfunction Review() {\n  const [isLoaded, setLoaded] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [reviewIndex, setReviewIndex] = useState(0);\n\n  function getQuestionAnswer(card) {\n    if (card[\"card_type\"] == \"basic\") {\n      const text = card[\"text\"];\n      const splitIndex = text.indexOf(\"\\n\\n\");\n      const question = text.substring(0, splitIndex).trim();\n      const answer = text.substring(splitIndex).trim();\n      return [question, answer];\n    } else if (card[\"card_type\"] == \"cloze\") {\n      const text = card[\"text\"];\n      let question = text.slice();\n      const cloze_regex = /\\[(.*?)\\]/g;\n      let deletions = text.match(cloze_regex);\n      const random_index = Math.floor(Math.random() * deletions.length);\n      const random_deletion = deletions[random_index];\n      deletions.splice(random_index, 1);\n      for (let i = 0; i < deletions.length; i++) {\n        question = question.replace(\n          deletions[i],\n          deletions[i].substring(1, deletions[i].length - 1)\n        );\n      }\n      question = question.replace(random_deletion, \"[...]\");\n      console.log(question);\n      return [question, text];\n    } else {\n      console.log(\"Invalid card type \" + card[\"card_type\"]);\n      return [\"\", \"\"];\n    }\n  }\n\n  useEffect(() => {\n    if (!isLoaded) {\n      fetch(\"/review\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          setCards(data[\"cards\"]);\n          setLoaded(true);\n          return;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [isLoaded]);\n\n  if (!isLoaded) {\n    return <h1>Loading</h1>;\n  } else if (cards.length === 0) {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"90vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 750 }}>\n          <h1>Nothing to review today</h1>\n          <p>Come back later</p>\n        </Grid.Column>\n      </Grid>\n    );\n  } else {\n    const card = cards[reviewIndex];\n    const [question, answer] = getQuestionAnswer(card);\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"90vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 750 }}>\n          <FlashCard type={card.card_type} text={card.text} id={card.id} />\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Review;\n","/home/jethro/projects/srs.ly/src/Cards.js",["58","59"],"/home/jethro/projects/srs.ly/src/FlashCard.js",[],"/home/jethro/projects/srs.ly/src/ClozeCard.js",["60","61","62","63","64","65","66","67"],"import { useState } from \"react\";\nimport {\n  Button,\n  TextArea,\n  Card,\n  Icon,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nconst ClozeCard = ({ id, text }) => {\n  let [phase, setPhase] = useState(\"question\");\n\n  let question = text.slice();\n  const cloze_regex = /\\[(.*?)\\]/g;\n  let deletions = text.match(cloze_regex);\n  const random_index = Math.floor(Math.random() * deletions.length);\n  const random_deletion = deletions[random_index];\n  deletions.splice(random_index, 1);\n  for (let i = 0; i < deletions.length; i++) {\n    question = question.replace(\n      deletions[i],\n      deletions[i].substring(1, deletions[i].length - 1)\n    );\n  }\n  question = question.replace(random_deletion, \"[...]\");\n  let answer = question.slice();\n  answer = answer.replace(\n    \"[...]\",\n    random_deletion.substring(1, random_deletion.length - 1)\n  );\n\n  const revealAnswer = () => {\n    setPhase(\"answer\");\n  };\n\n  const submitRating = (rating) => {\n    fetch(\"/review\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        id: id,\n        rating: rating,\n      }),\n    }).then((response) => {\n      alert(\"Card Reviewed!\");\n    });\n  };\n\n  if (phase === \"question\") {\n    return (\n      <div>\n        <h1>{question}</h1>\n        <Button animated onClick={revealAnswer}>\n          <Button.Content hidden>Reveal</Button.Content>\n          <Button.Content visible>\n            <Icon name=\"eye\" />\n          </Button.Content>\n        </Button>\n      </div>\n    );\n  } else if (phase === \"answer\") {\n    return (\n      <div>\n        <h1>{answer}</h1>\n        <Button.Group>\n          <Button color=\"red\" onClick={() => submitRating(0.2)}>\n            Again\n          </Button>\n          <Button color=\"grey\" onClick={() => submitRating(0.4)}>\n            Hard\n          </Button>\n          <Button color=\"green\" onClick={() => submitRating(0.6)}>\n            Good\n          </Button>\n          <Button color=\"blue\" onClick={() => submitRating(0.8)}>\n            Easy\n          </Button>\n        </Button.Group>\n      </div>\n    );\n  } else {\n    <div>\n      <h1>{answer}</h1>\n      <div>Submitted!</div>\n    </div>;\n  }\n};\n\nexport default ClozeCard;\n","/home/jethro/projects/srs.ly/src/BasicCard.js",["68","69","70","71","72","73","74","75"],"import { useState } from \"react\";\nimport {\n  Button,\n  TextArea,\n  Card,\n  Icon,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nconst BasicCard = ({ id, text }) => {\n  let [phase, setPhase] = useState(\"question\");\n\n  const [question, answer] = text.split(\"\\n\\n\");\n\n  const revealAnswer = () => {\n    setPhase(\"answer\");\n  };\n\n  const submitRating = (rating) => {\n    fetch(\"/review\", {\n      method: \"post\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        id: id,\n        rating: rating,\n      }),\n    }).then((response) => {\n      alert(\"Card Reviewed!\");\n    });\n  };\n\n  if (phase === \"question\") {\n    return (\n      <div>\n        <h1>{question}</h1>\n        <Button animated onClick={revealAnswer}>\n          <Button.Content hidden>Reveal</Button.Content>\n          <Button.Content visible>\n            <Icon name=\"eye\" />\n          </Button.Content>\n        </Button>\n      </div>\n    );\n  } else if (phase === \"answer\") {\n    return (\n      <div>\n        <h1>{question}</h1>\n        <p>{answer}</p>\n        <Button.Group>\n          <Button color=\"red\" onClick={() => submitRating(0.2)}>\n            Again\n          </Button>\n          <Button color=\"grey\" onClick={() => submitRating(0.4)}>\n            Hard\n          </Button>\n          <Button color=\"green\" onClick={() => submitRating(0.6)}>\n            Good\n          </Button>\n          <Button color=\"blue\" onClick={() => submitRating(0.8)}>\n            Easy\n          </Button>\n        </Button.Group>\n      </div>\n    );\n  } else {\n    <div>\n      <h1>{question}</h1>\n      <p>{answer}</p>\n      <div>Submitted!</div>\n    </div>;\n  }\n};\n\nexport default BasicCard;\n",{"ruleId":"76","severity":1,"message":"77","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":18},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"76","severity":1,"message":"84","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"76","severity":1,"message":"85","line":2,"column":18,"nodeType":"78","messageId":"79","endLine":2,"endColumn":22},{"ruleId":"76","severity":1,"message":"86","line":2,"column":24,"nodeType":"78","messageId":"79","endLine":2,"endColumn":28},{"ruleId":"76","severity":1,"message":"87","line":2,"column":30,"nodeType":"78","messageId":"79","endLine":2,"endColumn":34},{"ruleId":"76","severity":1,"message":"88","line":2,"column":42,"nodeType":"78","messageId":"79","endLine":2,"endColumn":48},{"ruleId":"76","severity":1,"message":"89","line":2,"column":50,"nodeType":"78","messageId":"79","endLine":2,"endColumn":55},{"ruleId":"76","severity":1,"message":"90","line":2,"column":57,"nodeType":"78","messageId":"79","endLine":2,"endColumn":64},{"ruleId":"76","severity":1,"message":"91","line":2,"column":66,"nodeType":"78","messageId":"79","endLine":2,"endColumn":73},{"ruleId":"76","severity":1,"message":"92","line":8,"column":25,"nodeType":"78","messageId":"79","endLine":8,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":11,"column":31,"nodeType":"95","messageId":"96","endLine":11,"endColumn":33},{"ruleId":"93","severity":1,"message":"94","line":17,"column":38,"nodeType":"95","messageId":"96","endLine":17,"endColumn":40},{"ruleId":"76","severity":1,"message":"97","line":65,"column":16,"nodeType":"78","messageId":"79","endLine":65,"endColumn":24},{"ruleId":"76","severity":1,"message":"98","line":65,"column":26,"nodeType":"78","messageId":"79","endLine":65,"endColumn":32},{"ruleId":"76","severity":1,"message":"99","line":2,"column":17,"nodeType":"78","messageId":"79","endLine":2,"endColumn":22},{"ruleId":"76","severity":1,"message":"85","line":2,"column":43,"nodeType":"78","messageId":"79","endLine":2,"endColumn":47},{"ruleId":"76","severity":1,"message":"100","line":2,"column":18,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"85","line":2,"column":28,"nodeType":"78","messageId":"79","endLine":2,"endColumn":32},{"ruleId":"76","severity":1,"message":"87","line":2,"column":40,"nodeType":"78","messageId":"79","endLine":2,"endColumn":44},{"ruleId":"76","severity":1,"message":"101","line":2,"column":46,"nodeType":"78","messageId":"79","endLine":2,"endColumn":50},{"ruleId":"76","severity":1,"message":"88","line":2,"column":52,"nodeType":"78","messageId":"79","endLine":2,"endColumn":58},{"ruleId":"76","severity":1,"message":"89","line":2,"column":60,"nodeType":"78","messageId":"79","endLine":2,"endColumn":65},{"ruleId":"76","severity":1,"message":"90","line":2,"column":67,"nodeType":"78","messageId":"79","endLine":2,"endColumn":74},{"ruleId":"76","severity":1,"message":"91","line":2,"column":76,"nodeType":"78","messageId":"79","endLine":2,"endColumn":83},{"ruleId":"76","severity":1,"message":"100","line":2,"column":18,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"85","line":2,"column":28,"nodeType":"78","messageId":"79","endLine":2,"endColumn":32},{"ruleId":"76","severity":1,"message":"87","line":2,"column":40,"nodeType":"78","messageId":"79","endLine":2,"endColumn":44},{"ruleId":"76","severity":1,"message":"101","line":2,"column":46,"nodeType":"78","messageId":"79","endLine":2,"endColumn":50},{"ruleId":"76","severity":1,"message":"88","line":2,"column":52,"nodeType":"78","messageId":"79","endLine":2,"endColumn":58},{"ruleId":"76","severity":1,"message":"89","line":2,"column":60,"nodeType":"78","messageId":"79","endLine":2,"endColumn":65},{"ruleId":"76","severity":1,"message":"90","line":2,"column":67,"nodeType":"78","messageId":"79","endLine":2,"endColumn":74},{"ruleId":"76","severity":1,"message":"91","line":2,"column":76,"nodeType":"78","messageId":"79","endLine":2,"endColumn":83},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["102"],"no-negated-in-lhs",["103"],"'Button' is defined but never used.","'Card' is defined but never used.","'Icon' is defined but never used.","'Form' is defined but never used.","'Header' is defined but never used.","'Image' is defined but never used.","'Message' is defined but never used.","'Segment' is defined but never used.","'setReviewIndex' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'question' is assigned a value but never used.","'answer' is assigned a value but never used.","'Label' is defined but never used.","'TextArea' is defined but never used.","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation"]